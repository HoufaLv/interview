<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.tms.mapper.TicketMapper">
  <resultMap id="BaseResultMap" type="com.kaishengit.tms.entity.Ticket">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="ticket_num" jdbcType="VARCHAR" property="ticketNum" />
    <result column="ticket_in_time" jdbcType="TIMESTAMP" property="ticketInTime" />
    <result column="ticket_state" jdbcType="VARCHAR" property="ticketState" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="ticket_out_time" jdbcType="VARCHAR" property="ticketOutTime" />
    <result column="ticket_validity_start" jdbcType="TIMESTAMP" property="ticketValidityStart" />
    <result column="ticket_validity_end" jdbcType="TIMESTAMP" property="ticketValidityEnd" />
    <result column="customer_id" jdbcType="BIGINT" property="customerId" />
    <result column="store_account_id" jdbcType="INTEGER" property="storeAccountId" />
    <result column="ticket_in_record_id" jdbcType="INTEGER" property="ticketInRecordId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, ticket_num, ticket_in_time, ticket_state, create_time, update_time, ticket_out_time, 
    ticket_validity_start, ticket_validity_end, customer_id, store_account_id, ticket_in_record_id
  </sql>
  <select id="selectByExample" parameterType="com.kaishengit.tms.entity.TicketExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ticket
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ticket
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from ticket
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.kaishengit.tms.entity.TicketExample">
    delete from ticket
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
   <delete id="deleteByStartAndEndNum">
        DELETE from ticket
            where ticket_num &gt;= convert(#{param1},unsigned int)
            and ticket_num &lt;= convert(#{param2},unsigned int)
    </delete>
  <delete id="batchDeleteById">
    DELETE from tickets
    WHERE id IN (
      <foreach collection="idList" item="id" separator=",">
        #{id}
      </foreach>
    )
  </delete>
  <insert id="insert" parameterType="com.kaishengit.tms.entity.Ticket">
    insert into ticket (id, ticket_num, ticket_in_time, 
      ticket_state, create_time, update_time, 
      ticket_out_time, ticket_validity_start, ticket_validity_end, 
      customer_id, store_account_id, ticket_in_record_id
      )
    values (#{id,jdbcType=BIGINT}, #{ticketNum,jdbcType=VARCHAR}, #{ticketInTime,jdbcType=TIMESTAMP}, 
      #{ticketState,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{ticketOutTime,jdbcType=VARCHAR}, #{ticketValidityStart,jdbcType=TIMESTAMP}, #{ticketValidityEnd,jdbcType=TIMESTAMP}, 
      #{customerId,jdbcType=BIGINT}, #{storeAccountId,jdbcType=INTEGER}, #{ticketInRecordId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.kaishengit.tms.entity.Ticket">
    insert into ticket
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="ticketNum != null">
        ticket_num,
      </if>
      <if test="ticketInTime != null">
        ticket_in_time,
      </if>
      <if test="ticketState != null">
        ticket_state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="ticketOutTime != null">
        ticket_out_time,
      </if>
      <if test="ticketValidityStart != null">
        ticket_validity_start,
      </if>
      <if test="ticketValidityEnd != null">
        ticket_validity_end,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
      <if test="storeAccountId != null">
        store_account_id,
      </if>
      <if test="ticketInRecordId != null">
        ticket_in_record_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="ticketNum != null">
        #{ticketNum,jdbcType=VARCHAR},
      </if>
      <if test="ticketInTime != null">
        #{ticketInTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketState != null">
        #{ticketState,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketOutTime != null">
        #{ticketOutTime,jdbcType=VARCHAR},
      </if>
      <if test="ticketValidityStart != null">
        #{ticketValidityStart,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketValidityEnd != null">
        #{ticketValidityEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=BIGINT},
      </if>
      <if test="storeAccountId != null">
        #{storeAccountId,jdbcType=INTEGER},
      </if>
      <if test="ticketInRecordId != null">
        #{ticketInRecordId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <insert id="batchInsert">
        insert into ticket (ticket_num, ticket_in_time,ticket_state, create_time,ticket_in_record_id)
        values
        <foreach collection="ticketList" item="ticket" separator=",">
            (#{ticket.ticketNum},#{ticket.ticketInTime},#{ticket.ticketState},#{ticket.createTime},#{ticket.ticketInRecordId })
        </foreach>
  </insert>
  <select id="countByExample" parameterType="com.kaishengit.tms.entity.TicketExample" resultType="java.lang.Long">
    select count(*) from ticket
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
   <select id="countTicketByState" resultType="java.util.Map">
        SELECT
            count(*) as total,
            count(case when ticket_state = '已入库' then 1 end) as in_num,
            count(case when ticket_state = '已下发' then 1 end) as out_num,
            count(case when ticket_state = '已销售' then 1 end) as sale_num,
            count(case when ticket_state = '已挂失' then 1 end) as lost_num,
            count(case when ticket_state = '已过期' then 1 end) as outtime_num
        from
            ticket
    </select>
	<select id="selectByStartAndEndNum" resultType="com.kaishengit.tms.entity.Ticket">
        SELECT * FROM ticket
        where ticket_num &gt;= convert(#{param1},unsigned int)
        and ticket_num &lt;= convert(#{param2},unsigned int)
              and ticket_state = #{param3};
    </select>
	 <select id="selectOutByStartAndEndNum" resultType="com.kaishengit.tms.entity.Ticket">
        SELECT * FROM ticket
        where ticket_num &gt;= convert(#{param1},unsigned int)
              and ticket_num &lt;= convert(#{param2},unsigned int)
    </select>
  <update id="updateByExampleSelective" parameterType="map">
    update ticket
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.ticketNum != null">
        ticket_num = #{record.ticketNum,jdbcType=VARCHAR},
      </if>
      <if test="record.ticketInTime != null">
        ticket_in_time = #{record.ticketInTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ticketState != null">
        ticket_state = #{record.ticketState,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ticketOutTime != null">
        ticket_out_time = #{record.ticketOutTime,jdbcType=VARCHAR},
      </if>
      <if test="record.ticketValidityStart != null">
        ticket_validity_start = #{record.ticketValidityStart,jdbcType=TIMESTAMP},
      </if>
      <if test="record.ticketValidityEnd != null">
        ticket_validity_end = #{record.ticketValidityEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="record.customerId != null">
        customer_id = #{record.customerId,jdbcType=BIGINT},
      </if>
      <if test="record.storeAccountId != null">
        store_account_id = #{record.storeAccountId,jdbcType=INTEGER},
      </if>
      <if test="record.ticketInRecordId != null">
        ticket_in_record_id = #{record.ticketInRecordId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update ticket
    set id = #{record.id,jdbcType=BIGINT},
      ticket_num = #{record.ticketNum,jdbcType=VARCHAR},
      ticket_in_time = #{record.ticketInTime,jdbcType=TIMESTAMP},
      ticket_state = #{record.ticketState,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      ticket_out_time = #{record.ticketOutTime,jdbcType=VARCHAR},
      ticket_validity_start = #{record.ticketValidityStart,jdbcType=TIMESTAMP},
      ticket_validity_end = #{record.ticketValidityEnd,jdbcType=TIMESTAMP},
      customer_id = #{record.customerId,jdbcType=BIGINT},
      store_account_id = #{record.storeAccountId,jdbcType=INTEGER},
      ticket_in_record_id = #{record.ticketInRecordId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.kaishengit.tms.entity.Ticket">
    update ticket
    <set>
      <if test="ticketNum != null">
        ticket_num = #{ticketNum,jdbcType=VARCHAR},
      </if>
      <if test="ticketInTime != null">
        ticket_in_time = #{ticketInTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketState != null">
        ticket_state = #{ticketState,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketOutTime != null">
        ticket_out_time = #{ticketOutTime,jdbcType=VARCHAR},
      </if>
      <if test="ticketValidityStart != null">
        ticket_validity_start = #{ticketValidityStart,jdbcType=TIMESTAMP},
      </if>
      <if test="ticketValidityEnd != null">
        ticket_validity_end = #{ticketValidityEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=BIGINT},
      </if>
      <if test="storeAccountId != null">
        store_account_id = #{storeAccountId,jdbcType=INTEGER},
      </if>
      <if test="ticketInRecordId != null">
        ticket_in_record_id = #{ticketInRecordId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kaishengit.tms.entity.Ticket">
    update ticket
    set ticket_num = #{ticketNum,jdbcType=VARCHAR},
      ticket_in_time = #{ticketInTime,jdbcType=TIMESTAMP},
      ticket_state = #{ticketState,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      ticket_out_time = #{ticketOutTime,jdbcType=VARCHAR},
      ticket_validity_start = #{ticketValidityStart,jdbcType=TIMESTAMP},
      ticket_validity_end = #{ticketValidityEnd,jdbcType=TIMESTAMP},
      customer_id = #{customerId,jdbcType=BIGINT},
      store_account_id = #{storeAccountId,jdbcType=INTEGER},
      ticket_in_record_id = #{ticketInRecordId,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
    <update id="batchUpdateState">
      update tickets set ticket_state = #{state} where
        id in(
      <foreach collection="ticketList" item="ticket" separator=",">
        #{ticket.id}
      </foreach>
        )

    </update>
</mapper>